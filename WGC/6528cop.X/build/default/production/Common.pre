
# 1 "Common.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.41\include\stdbool.h"
typedef unsigned char bool;

# 18 "Common.h"
extern void FloatToChar(float *f, uint8_t *ch);
extern void CharToFloat(float *f, uint8_t *ch);
extern void DoubleToChar(long double *d, uint8_t *ch);
uint8_t HCD(uint8_t dat);
uint8_t DCH(uint8_t dat);
extern void SetVaildData(uint8_t * dat, const uint32_t max, const uint16_t min);
bool DataIsVaild(uint16_t dat, const uint16_t max, const uint16_t min);
extern void DataReverse(uint8_t *dat, const uint8_t byte);
extern void Delay10ms(char time);
extern void Delay100ms(char time);
extern void Delay1s(char time);
extern void CopyDat(uint8_t* output, uint8_t* input, const uint8_t bytes);
extern void ClearDat(uint8_t* output, const uint8_t dat, const uint8_t bytes);

# 9 "Common.c"
void FloatToChar(float *f, uint8_t *ch) {
uint8_t count;
void * pf;
pf = f;

for (count = 0; count < 4; count++) {
*(ch + count) = *((uint8_t *) pf + 3 - count);
}
}

# 25
void CharToFloat(float *f, uint8_t *ch) {
uint8_t count;
void *pf;
pf = f;

for (count = 0; count < 4; count++) {
*((uint8_t *) pf + count) = *(ch + 3 - count);
}
}

# 41
void DoubleToChar(long double *d, uint8_t *ch) {
uint8_t count;
void * pf;
pf = d;

for (count = 0; count < 8; count++) {
*(ch + count) = *((uint8_t *) pf + 7 - count);
}
}

# 57
uint8_t HCD(uint8_t dat) {
return ((dat >> 4)&0x0f)*10 + (dat & 0x0f);
}

# 67
uint8_t DCH(uint8_t dat) {
return ((dat / 10 << 4)&0xF0) | ((dat % 10)&0x0F);
}

# 82
bool DataIsVaild(uint16_t dat, const uint16_t max, const uint16_t min) {
if (dat > max) return 0;
else if (dat < min) return 0;
return 1;
}

# 94
void SetVaildData(uint8_t * dat, const uint32_t max, const uint16_t min) {
uint16_t tmp = (* dat << 8) + *(dat + 1);

if (tmp > max) {
*dat = max >> 8;
*(dat + 1) = max & 0x00ff;
} else if (tmp < min) {
*dat = min >> 8;
*(dat + 1) = min & 0x00ff;
}
}


void DataReverse(uint8_t *dat, const uint8_t byte) {
uint8_t tmp, cnt;

for (cnt = 0; cnt < byte / 2; cnt++) {
tmp = dat[cnt];
dat[cnt] = dat[byte - 1 - cnt];
dat[byte - 1 - cnt] = tmp;
}
}



void Delay10ms(char time) {
uint16_t i;
while (time-- > 0)
for (i = 0; i < 2620; i++)
asm("nop");

}

void Delay100ms(char time) {
uint16_t i;
while (time-- > 0)
for (i = 0; i < 26000; i++)
asm("nop");

}

void Delay1s(char time) {
uint32_t i;
while (time-- > 0)
for (i = 0; i < 170000; i++)
asm("nop");

}

void CopyDat( uint8_t* output,uint8_t *input,const uint8_t bytes) {
uint8_t num;
for (num = 0; num < bytes; num++)
*(output + num) = *(input + num);
}

void ClearDat(uint8_t *output, const uint8_t dat, const uint8_t bytes) {
uint8_t num;
for (num = 0; num < bytes; num++)
*(output + num) = dat;
}

